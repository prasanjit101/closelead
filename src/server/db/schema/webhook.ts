import { sqliteTable, text, integer } from "drizzle-orm/sqlite-core";
import { relations } from "drizzle-orm";
import { user } from "./user";
import {
  createSelectSchema,
  createUpdateSchema,
  createInsertSchema,
} from "drizzle-zod";
import { z } from "zod";

export const formType = ["custom", "tally"] as const;
export type FormType = (typeof formType)[number];
export const formTypeSchema = z.enum(formType);

export const webhooks = sqliteTable("webhooks", {
  id: text("id").primaryKey(),
  userId: text("user_id")
    .references(() => user.id, { onDelete: "cascade" })
    .notNull(),
  name: text("name").notNull(),
  webhookUrl: text("webhook_url").notNull(),
  webhookSecret: text("webhook_secret"), // New field for webhook secret
  formType: text("form_type", { enum: formType }).notNull(),
  scoringPrompt: text("scoring_prompt"),
  isActive: integer("is_active", { mode: "boolean" }).default(true),
  createdAt: integer("created_at", { mode: "timestamp" }),
  updatedAt: integer("updated_at", { mode: "timestamp" }),
});

// Define many:1 relationship - many webhooks belong to one user
export const webhookRelations = relations(webhooks, ({ one }) => ({
  user: one(user, {
    fields: [webhooks.userId],
    references: [user.id],
  }),
}));

export type Webhook = typeof webhooks.$inferSelect;
export const selectWebhookSchema = createSelectSchema(webhooks);
export const insertWebhookSchema = createInsertSchema(webhooks).omit({
  id: true,
  createdAt: true,
  updatedAt: true,
  userId: true,
  webhookUrl: true, // Omit webhookUrl as it's generated by the backend
});
export const updateWebhookSchema = createUpdateSchema(webhooks);
export type WebhookInsert = z.infer<typeof insertWebhookSchema>;
export type WebhookUpdate = z.infer<typeof updateWebhookSchema>;
export type WebhookSelect = z.infer<typeof selectWebhookSchema>;
